from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.user_keyboards import to_home_menu_inline
from keyboards.shop_keyboards import get_shop_main_keyboard
from utils.database import Database

router = Router()
db = Database()

# Constants
LAND_MAP_PRICE = 25
ADMIN_GROUP_ID = -1002389059389

class LandMapStates(StatesGroup):
    waiting_land_map_photos = State()

def get_land_map_keyboard() -> InlineKeyboardMarkup:
    """Generate keyboard for land map purchase screen"""
    keyboard = [
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 25‚ÇΩ", callback_data="buy_land_map")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_confirm_keyboard() -> InlineKeyboardMarkup:
    """Generate confirmation keyboard"""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="confirm_land_map")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_admin_confirm_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """Generate admin confirmation keyboard"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"send_land_map_{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data=f"cancel_land_map_{user_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(F.data == "shop_land_map")
async def show_land_map_info(callback: CallbackQuery):
    """Show land map product information"""
    try:
        await callback.message.edit_text(
            text=(
                "üó∫ <b>Land Map - –≤–∞—à –ø—É—Ç—å –∫ –ø–æ–±–µ–¥–µ!</b>\n\n"
                "üìç –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è Land Map:\n"
                "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π\n"
                "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –≤—ã—Å–∞–¥–∫–∏\n"
                "‚Ä¢ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞—Å–∞–¥\n"
                "‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ª—É—Ç–∞\n"
                "‚Ä¢ –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π –∏–≥—Ä—ã\n\n"
                "üí° –° —ç—Ç–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤!\n\n"
                "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 25‚ÇΩ"
            ),
            reply_markup=get_land_map_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "buy_land_map") 
async def confirm_purchase(callback: CallbackQuery):
    """Show purchase confirmation"""
    try:
        await callback.message.edit_text(
            text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Land Map –∑–∞ 25‚ÇΩ‚ùì",
            reply_markup=get_confirm_keyboard()
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "confirm_land_map")
async def process_purchase(callback: CallbackQuery):
    """Process land map purchase"""
    try:
        user_id = str(callback.from_user.id)
        username = callback.from_user.username or "–ë–µ–∑ username"
        full_name = callback.from_user.full_name
        
        user = db.get_user(telegram_id=user_id)
        if not user:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=to_home_menu_inline()
            )
            return
            
        if user[3] < LAND_MAP_PRICE:
            await callback.message.edit_text(
                text=(
                    "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Land Map.\n"
                    f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {LAND_MAP_PRICE}‚ÇΩ\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user[3]}‚ÇΩ"
                ),
                reply_markup=get_land_map_keyboard()
            )
            return

        # Deduct balance
        db.update_user(telegram_id=user_id, balance=-LAND_MAP_PRICE)

        await callback.message.edit_text(
            text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=to_home_menu_inline()
        )
        
        # Notify admins
        await callback.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=(
                f"üõç –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ Land Map!\n\n"
                f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {full_name}\n"
                f"üÜî ID: {user_id}\n"
                f"üìù Username: @{username}\n"
                f"üí∞ –°—É–º–º–∞: {LAND_MAP_PRICE}‚ÇΩ"
            ),
            reply_markup=get_admin_confirm_keyboard(user_id)
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("send_land_map_"))
async def admin_send_land_map(callback: CallbackQuery, state: FSMContext):
    """Admin handler for sending land map"""
    try:
        user_id = callback.data.split("_")[-1]
        await state.update_data(user_id=user_id)
        await callback.message.edit_text(
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Land Map –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"
        )
        await state.set_state(LandMapStates.waiting_land_map_photos)
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("cancel_land_map_"))
async def admin_cancel_purchase(callback: CallbackQuery):
    """Admin handler for canceling purchase"""
    try:
        user_id = callback.data.split("_")[-1]
        
        # Return balance to user
        db.update_user(telegram_id=user_id, balance=LAND_MAP_PRICE)
        
        await callback.bot.send_message(
            chat_id=user_id,
            text=(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ Land Map –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
                "üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n"
                "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã."
            ),
            reply_markup=to_home_menu_inline()
        )
        await callback.message.edit_text("‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(LandMapStates.waiting_land_map_photos)
async def process_land_map_photos(message: Message, state: FSMContext):
    """Process and send land map photos to user"""
    try:
        if not message.photo:
            await message.edit_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Land Map")
            return

        data = await state.get_data()
        user_id = data.get("user_id")
        
        if not user_id:
            await message.edit_text("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.send_photo(
            chat_id=user_id,
            photo=message.photo[-1].file_id,
            caption=(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º Land Map!\n\n"
                "üó∫ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–∞—Ä—Ç–∞–º –∏ –ø–æ–∑–∏—Ü–∏—è–º.\n"
                "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö —Å —É–º–æ–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–±–µ–¥—ã!\n\n"
                "–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã! üéÆ"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞
        review_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_reviews_{user_id}_{LAND_MAP_PRICE}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
        ])
        
        await message.bot.send_message(
            chat_id=user_id,
            text="–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –ø–æ–∫—É–ø–∫–µ!",
            reply_markup=review_keyboard
        )
        
        await state.clear()
        await message.edit_text("‚úÖ Land Map —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    except Exception as e:
        await message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
