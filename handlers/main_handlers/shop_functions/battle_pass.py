from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.shop_keyboards import get_back_to_shop_keyboard
from utils.database import Database
import re

router = Router()
db = Database()

class BattlePassStates(StatesGroup):
    waiting_for_nickname = State()
    confirm_purchase = State()
    waiting_for_confirmation = State()

@router.callback_query(F.data == "shop_battle_pass")
async def battle_pass_gift_donate(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "üéÆ <b>–ü–æ–∫—É–ø–∫–∞ Battle Pass –ø–æ–¥–∞—Ä–∫–æ–º</b>\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Fortnite:\n\n"
            "‚ÑπÔ∏è –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω:\n"
            "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤\n" 
            "‚Ä¢ –°–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤ - _",
            reply_markup=get_back_to_shop_keyboard()
        )
        await state.set_state(BattlePassStates.waiting_for_nickname)
    except Exception as e:
        print(f"Error in battle_pass_gift_donate: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(BattlePassStates.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞
        if not 3 <= len(message.text) <= 16:
            await message.answer(
                "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤",
                reply_markup=get_back_to_shop_keyboard()
            )
            return
            
        if not re.match("^[a-zA-Z0-9-_]+$", message.text):
            await message.answer(
                "‚ùå –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã - _",
                reply_markup=get_back_to_shop_keyboard()
            )
            return

        await state.update_data(nickname=message.text)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_bp_purchase")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_bp_purchase")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
        ])
        
        await message.answer(
            f"üìù <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
            f"üë§ –ù–∏–∫–Ω–µ–π–º: {message.text}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 720‚ÇΩ\n\n"
            "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?",
            reply_markup=keyboard
        )
        await state.set_state(BattlePassStates.confirm_purchase)
    except Exception as e:
        print(f"Error in process_nickname: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞",
            reply_markup=get_back_to_shop_keyboard()
        )

@router.callback_query(F.data == "confirm_bp_purchase", BattlePassStates.confirm_purchase)
async def confirm_purchase(callback: CallbackQuery, state: FSMContext):
    try:
        user_data = await state.get_data()
        user = db.get_user(str(callback.from_user.id))
        
        if not user:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=get_back_to_shop_keyboard()
            )
            await state.clear()
            return

        if int(user[2]) < 720:
            await callback.message.edit_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\n"
                "üí∞ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 720‚ÇΩ\n"
                "üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user[2]}‚ÇΩ\n\n"
                "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏",
                reply_markup=get_back_to_shop_keyboard()
            )
            await state.clear()
            return

        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í—ã–¥–∞–Ω–æ", callback_data=f"bp_gift_sent_{callback.from_user.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"bp_gift_cancel_{callback.from_user.id}")
            ],
            [InlineKeyboardButton(text="üì± –°–≤—è–∑–∞—Ç—å—Å—è", url=f"tg://user?id={callback.from_user.id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
        ])

        await callback.bot.send_message(
            chat_id="-1002389059389",
            text=(
                "üéÆ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ Battle Pass!</b>\n\n"
                f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                f"üîó Username: @{callback.from_user.username}\n"
                f"üÜî ID: <code>{callback.from_user.id}</code>\n"
                f"üéØ –ù–∏–∫–Ω–µ–π–º: {user_data['nickname']}\n"
                f"üí∞ –°—É–º–º–∞: 720‚ÇΩ"
            ),
            reply_markup=admin_keyboard
        )

        await callback.message.edit_text(
            "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏ Battle Pass\n"
            "üì± –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏",
            reply_markup=get_back_to_shop_keyboard()
        )
        await state.set_state(BattlePassStates.waiting_for_confirmation)
    except Exception as e:
        print(f"Error in confirm_purchase: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
            reply_markup=get_back_to_shop_keyboard()
        )
        await state.clear()

@router.callback_query(F.data.startswith("bp_gift_sent_"))
async def gift_sent(callback: CallbackQuery):
    try:
        user_id = callback.data.split("_")[3]
        
        user_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–ª—É—á–∏–ª", callback_data=f"bp_confirm_received_{user_id}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª", callback_data=f"bp_not_received_{user_id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
        ])
        
        await callback.bot.send_message(
            chat_id=user_id,
            text=(
                "üéÅ Battle Pass –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!\n\n"
                "‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞\n"
                "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:"
            ),
            reply_markup=user_keyboard
        )
        
        await callback.message.edit_reply_markup()
        await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"Error in gift_sent: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

@router.callback_query(F.data.startswith("bp_confirm_received_"))
async def confirm_received(callback: CallbackQuery):
    try:
        user_id = callback.data.split("_")[3]
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        db.update_user(str(callback.from_user.id), balance=-720)
        
        await callback.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!\n\n"
            "üí∞ –°–ø–∏—Å–∞–Ω–æ: 720‚ÇΩ\n"
            "üéÆ –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ Fortnite!",
            reply_markup=get_back_to_shop_keyboard()
        )
    except Exception as e:
        print(f"Error in confirm_received: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è",
            reply_markup=get_back_to_shop_keyboard()
        )

@router.callback_query(F.data.startswith("bp_gift_cancel_"))
async def cancel_purchase(callback: CallbackQuery):
    try:
        user_id = callback.data.split("_")[3]
        
        await callback.bot.send_message(
            chat_id=user_id,
            text=(
                "‚ùå –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ Battle Pass –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
                "üí≠ –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
                "üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"
            ),
            reply_markup=get_back_to_shop_keyboard()
        )
        
        await callback.message.edit_reply_markup()
        await callback.answer("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"Error in cancel_purchase: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏")

@router.callback_query(F.data == "cancel_bp_purchase")
async def cancel_purchase_by_user(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "‚ùå –ü–æ–∫—É–ø–∫–∞ Battle Pass –æ—Ç–º–µ–Ω–µ–Ω–∞\n"
            "üí≠ –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
            reply_markup=get_back_to_shop_keyboard()
        )
        await state.clear()
    except Exception as e:
        print(f"Error in cancel_purchase_by_user: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã")
        await state.clear()
