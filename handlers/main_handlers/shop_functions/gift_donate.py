from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards.shop_keyboards import get_back_to_shop_keyboard
from utils.database import Database
import re
import asyncio
from datetime import datetime, timedelta
from main import bot

router = Router()
db = Database()

# Dictionary to keep track of timers: user_id -> (end_time, nickname)
timers = {}

class GiftDonateStates(StatesGroup):
    waiting_for_donation_type = State()
    waiting_for_amount = State()
    waiting_for_nickname_regular = State()
    confirm_purchase_regular = State()
    waiting_for_confirmation_regular = State()
    waiting_for_join_confirmation = State()
    waiting_for_nickname_gift_system = State()
    confirm_purchase_gift_system = State()

@router.callback_query(F.data == "gift_shop_donate")  # Changed from shop_gift_donate
async def gift_donate_menu(callback: CallbackQuery, state: FSMContext):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –î–æ–Ω–∞—Ç –æ–±—ã—á–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–º (48 —á–∞—Å–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è)", callback_data="gift_donate_regular")],  # Changed from donate_regular_gift
            [InlineKeyboardButton(text="üéÅ –î–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—Ä–∫–æ–≤ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)", callback_data="gift_donate_system")],  # Changed from donate_gift_system_gift
            [InlineKeyboardButton(text="‚è≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="check_gift_timer")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]  # Changed from to_home_menu
        ])
        await callback.message.edit_text(
            "üéÅ <b>–î–æ–Ω–∞—Ç V-Bucks</b>\n\n"
            "üí∞ –ö—É—Ä—Å: 100 V-Buck = 55‚ÇΩ\n"
            "üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50‚ÇΩ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–Ω–∞—Ç–∞:",
            reply_markup=keyboard
        )
        await state.set_state(GiftDonateStates.waiting_for_donation_type)
    except Exception as e:
        print(f"Error in gift_donate_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(F.data == "check_gift_timer")
async def check_gift_timer(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        if user_id not in timers:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="gift_shop_donate")]
            ])
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏",
                reply_markup=keyboard
            )
            return

        end_time, nickname = timers[user_id]
        now = datetime.now()
        remaining = end_time - now

        if remaining.total_seconds() <= 0:
            del timers[user_id]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="gift_shop_donate")]
            ])
            await callback.message.edit_text(
                "‚úÖ –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫! –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω",
                reply_markup=keyboard
            )
            return

        hours, remainder = divmod(int(remaining.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        time_left = f"{hours:02}:{minutes:02}:{seconds:02}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_gift_timer")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="gift_shop_donate")]
        ])

        await callback.message.edit_text(
            f"‚è≥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø–æ–¥–∞—Ä–∫–µ:</b>\n\n"
            f"üéØ –ù–∏–∫–Ω–µ–π–º: {nickname}\n"
            f"‚åõÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left}\n\n"
            f"‚ÑπÔ∏è –ü–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"Error in check_gift_timer: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–π–º–µ—Ä–∞")

@router.callback_query(F.data == "gift_donate_regular", GiftDonateStates.waiting_for_donation_type)
async def donate_regular_gift(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "üéÅ <b>–î–æ–Ω–∞—Ç –æ–±—ã—á–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–º</b>\n\n"
            "üí∞ –ö—É—Ä—Å: 100 V-Buck = 55‚ÇΩ\n"
            "üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50‚ÇΩ\n\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö :",
            reply_markup=get_back_to_shop_keyboard()
        )
        await state.set_state(GiftDonateStates.waiting_for_amount)
    except Exception as e:
        print(f"Error in donate_regular_gift: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.message(GiftDonateStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        # Remove any non-digit characters
        amount = int(''.join(filter(str.isdigit, message.text)))
        
        if amount < 50:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞ - 50‚ÇΩ",
                reply_markup=get_back_to_shop_keyboard()
            )
            return
            
        await state.update_data(amount=amount)
        await message.answer(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Fortnite:\n\n"
            "‚ÑπÔ∏è –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω:\n"
            "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤\n" 
            "‚Ä¢ –°–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤ - _",
            reply_markup=get_back_to_shop_keyboard()
        )
        await state.set_state(GiftDonateStates.waiting_for_nickname_regular)
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º",
            reply_markup=get_back_to_shop_keyboard()
        )
    except Exception as e:
        print(f"Error in process_amount: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã",
            reply_markup=get_back_to_shop_keyboard()
        )

@router.message(GiftDonateStates.waiting_for_nickname_regular)
async def process_nickname_regular(message: Message, state: FSMContext):
    try:
        nickname = message.text.strip()
        if not 3 <= len(nickname) <= 16:
            await message.answer(
                "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤",
                reply_markup=get_back_to_shop_keyboard()
            )
            return
                
        if not re.match("^[a-zA-Z0-9-_]+$", nickname):
            await message.answer(
                "‚ùå –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª—ã - _",
                reply_markup=get_back_to_shop_keyboard()
            )
            return

        user_data = await state.get_data()
        amount = user_data['amount']
        vbucks = int(amount / 0.55)  # Convert rubles to V-Bucks based on rate
        
        await state.update_data(nickname=nickname, vbucks=vbucks)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="gift_confirm_purchase")],  # Changed callback
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="gift_cancel")]  # Changed callback
        ])
        
        await message.answer(
            f"üìù <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:</b>\n\n"
            f"üéØ –ù–∏–∫–Ω–µ–π–º: {nickname}\n"
            f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n"
            f"üíé V-Bucks: {vbucks}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
            reply_markup=keyboard
        )
        await state.set_state(GiftDonateStates.confirm_purchase_regular)
    except Exception as e:
        print(f"Error in process_nickname_regular: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∏–∫–Ω–µ–π–º–∞",
            reply_markup=get_back_to_shop_keyboard()
        )

@router.callback_query(F.data == "gift_confirm_purchase", GiftDonateStates.confirm_purchase_regular)
async def confirm_purchase_regular(callback: CallbackQuery, state: FSMContext):
    try:
        user_data = await state.get_data()
        amount = user_data['amount']
        nickname = user_data['nickname']
        vbucks = user_data['vbucks']
        
        user = db.get_user(telegram_id=callback.from_user.id)
        
        if not user:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=get_back_to_shop_keyboard()
            )
            await state.clear()
            return

        try:
            balance = int(user[3])
        except (ValueError, IndexError):
            await callback.message.edit_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                reply_markup=get_back_to_shop_keyboard()
            )
            await state.clear()
            return

        if balance < amount:
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!\n\n"
                f"üí∞ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {amount}‚ÇΩ\n"
                f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n\n"
                "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏",
                reply_markup=get_back_to_shop_keyboard()
            )
            await state.clear()
            return

        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –í—ã–¥–∞–Ω–æ", callback_data=f"gift_sent_{callback.from_user.id}_{nickname}_{amount}_{vbucks}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"gift_cancel_{callback.from_user.id}")
            ],
            [InlineKeyboardButton(text="üì± –°–≤—è–∑–∞—Ç—å—Å—è", url=f"tg://user?id={callback.from_user.id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="gift_admin_home")]
        ])

        await callback.bot.send_message(
            chat_id="-1002389059389",
            text=(
                "üéÅ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–æ–Ω–∞—Ç –æ–±—ã—á–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–º!</b>\n\n"
                f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {callback.from_user.full_name}\n"
                f"üîó Username: @{callback.from_user.username}\n"
                f"üÜî ID: <code>{callback.from_user.id}</code>\n"
                f"üéØ –ù–∏–∫–Ω–µ–π–º: {nickname}\n"
                f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n"
                f"üíé V-Bucks: {vbucks}"
            ),
            reply_markup=admin_keyboard
        )

        await callback.message.edit_text(
            "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_back_to_shop_keyboard()
        )
        await state.set_state(GiftDonateStates.waiting_for_confirmation_regular)
    except Exception as e:
        print(f"Error in confirm_purchase_regular: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
            reply_markup=get_back_to_shop_keyboard()
        )
        await state.clear()

@router.callback_query(F.data.startswith("gift_sent_"))
async def gift_sent_regular(callback: CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split("_")
        user_id = int(parts[2])
        nickname_fortnite = parts[3]
        amount = int(parts[4])
        vbucks = int(parts[5])
        
        user = db.get_user(telegram_id=user_id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        nickname = user[2]

        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        db.update_user(str(user_id), balance=-amount)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—Ä–∫–æ–≤
        current_state = await state.get_state()
        if current_state == GiftDonateStates.waiting_for_confirmation_regular:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            end_time = datetime.now() + timedelta(hours=48)
            timers[user_id] = (end_time, nickname)

            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–∞–π–º–µ—Ä–æ–º
            user_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è", callback_data=f"gift_check_time_{user_id}")],
                [InlineKeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_review_{user_id}_{amount}")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
            ])
            
            await callback.bot.send_message(
                chat_id=user_id,
                text=(
                    f"üéÅ {vbucks} V-Bucks –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 48 —á–∞—Å–æ–≤!\n\n"
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –æ–ø–ª–∞—Ç—É.\n"
                    f"‚è≥ –¢–∞–π–º–µ—Ä –Ω–∞ 48 —á–∞—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω.\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å: 48:00:00 –¥–æ –≤—ã–¥–∞—á–∏ –≤–∞–º –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ –Ω–∏–∫: {nickname_fortnite}.\n\n"
                ),
                reply_markup=user_keyboard
            )
            
            # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 48 —á–∞—Å–æ–≤
            asyncio.create_task(start_timer(user_id, 48))
        else:
            # –î–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–∞—Ä–∫–æ–≤ - –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞
            user_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_review_{user_id}_{amount}")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
            ])
            
            await callback.bot.send_message(
                chat_id=user_id,
                text=(
                    f"üéÅ {vbucks} V-Bucks –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!\n\n"
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –æ–ø–ª–∞—Ç—É.\n"
                    f"üéØ –ù–∏–∫–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {nickname_fortnite}\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
                ),
                reply_markup=user_keyboard
            )
        
        await callback.message.edit_reply_markup()
        await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    
    except Exception as e:
        print(f"Error in gift_sent_regular: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def start_timer(user_id: int, hours: int):
    try:
        await asyncio.sleep(hours * 3600)
        if user_id in timers:
            end_time, nickname = timers[user_id]
            del timers[user_id]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
            ])
            await bot.send_message(
                chat_id=user_id,
                text=f"‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞ 48 —á–∞—Å–æ–≤ –∏—Å—Ç–µ–∫. –í–∞—à –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {nickname} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
                reply_markup=keyboard
            )
    except Exception as e:
        print(f"Error in start_timer: {e}")

@router.callback_query(F.data == "gift_donate_system", GiftDonateStates.waiting_for_donation_type)
async def donate_gift_system(callback: CallbackQuery, state: FSMContext):
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è", callback_data="gift_confirm_join")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª–æ–≤–∏—è", callback_data="shop_gift_join")]
        ])
        await callback.message.edit_text(
            "üéÅ <b>–î–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–∞—Ä–∫–æ–≤</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–∏—Å—Ç–µ–º–µ –ø–æ–¥–∞—Ä–∫–æ–≤?",
            reply_markup=keyboard
        )
        await state.set_state(GiftDonateStates.waiting_for_join_confirmation)
    except Exception as e:
        print(f"Error in donate_gift_system: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(F.data == "gift_confirm_join", GiftDonateStates.waiting_for_join_confirmation)
async def confirm_join_gift_system(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 50‚ÇΩ):",
            reply_markup=get_back_to_shop_keyboard()
        )
        await state.set_state(GiftDonateStates.waiting_for_amount)
    except Exception as e:
        print(f"Error in confirm_join_gift_system: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(F.data.startswith("gift_check_time_"))
async def check_time(callback: CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[-1])

        if user_id not in timers:
            await callback.answer("‚è≥ –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å—Ç–µ–∫.")
            return

        end_time, nickname = timers[user_id]
        now = datetime.now()
        remaining = end_time - now

        if remaining.total_seconds() <= 0:
            await callback.answer("‚è≥ –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫.")
            del timers[user_id]
            return

        hours, remainder = divmod(int(remaining.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        time_left = f"{hours:02}:{minutes:02}:{seconds:02}"

        await callback.message.edit_text(
            f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {time_left} –¥–æ –≤—ã–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {nickname}.",
            reply_markup=get_back_to_shop_keyboard()
        )
        await callback.answer(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {time_left}")
    except Exception as e:
        print(f"Error in check_time: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ä–µ–º–µ–Ω–∏")
