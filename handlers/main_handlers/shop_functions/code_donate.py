from aiogram import F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from utils.database import Database
from keyboards.user_keyboards import to_home_menu_inline
from utils.constants import GROUP_ID_SERVICE_PROVIDER

router = Router()
db = Database()

class DonateStates(StatesGroup):
    choosing_package = State()
    confirming = State()
    entering_code = State()
    admin_confirmation = State()

def get_navigation_keyboard(include_back=True, include_home=True, back_callback="go_back"):
    buttons = []
    if include_back:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback))
    if include_home:
        buttons.append(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

def get_packages_keyboard():
    packages = [
        ("1000 –≤-–±–∞–∫—Å–æ–≤ - 1300‚ÇΩ", "package_1000"),
        ("2800 –≤-–±–∞–∫—Å–æ–≤ - 2800‚ÇΩ", "package_2800"),
        ("5000 –≤-–±–∞–∫—Å–æ–≤ - 4700‚ÇΩ", "package_5000"),
        ("13500 –≤-–±–∞–∫—Å–æ–≤ - 11000‚ÇΩ", "package_13500")
    ]
    
    buttons = [[InlineKeyboardButton(text=text, callback_data=data)] 
               for text, data in packages]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="code_confirm_donate")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="code_cancel_donate")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_packages")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_confirm_keyboard(user_id: int):
    buttons = [
        [
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"admin_contact_{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{user_id}")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"admin_send_code_{user_id}")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "shop_code_donate")
async def donate_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∫–æ–¥:",
        reply_markup=get_packages_keyboard()
    )
    await state.set_state(DonateStates.choosing_package)

@router.callback_query(F.data == "back_to_packages") 
async def back_to_packages(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∫–æ–¥:",
        reply_markup=get_packages_keyboard()
    )
    await state.set_state(DonateStates.choosing_package)

@router.callback_query(F.data.startswith("package_"))
async def donate_choose_package(callback: CallbackQuery, state: FSMContext):
    amount = callback.data.split("_")[1]

    prices = {
        "1000": "1300‚ÇΩ",
        "2800": "2800‚ÇΩ",
        "5000": "4700‚ÇΩ",
        "13500": "11000‚ÇΩ"
    }

    try:
        price = prices[amount]
        await state.update_data(amount=amount, price=price)
        await callback.message.edit_text(
            f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ {amount} –≤-–±–∞–∫—Å–æ–≤ –∑–∞ {price}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
            reply_markup=get_confirm_keyboard()
        )
        await state.set_state(DonateStates.confirming)
    except KeyError:
        await callback.message.edit_text(
            "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_navigation_keyboard(back_callback="shop_code_donate")
        )
        await state.set_state(DonateStates.choosing_package)

@router.callback_query(F.data == "code_cancel_donate")
async def donate_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚ùå –î–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", 
        reply_markup=get_navigation_keyboard(back_callback="shop_code_donate")
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "code_confirm_donate")
async def donate_confirm(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    user_id = callback.from_user.id
    await state.update_data(user_id=user_id)
    
    await callback.message.bot.send_message(
        GROUP_ID_SERVICE_PROVIDER,
        f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username or '–ë–µ–∑ username'} (ID: {user_id}) "
        f"–∫—É–ø–∏–ª –∫–æ–¥ –Ω–∞ {user_data.get('amount')} –≤-–±–∞–∫—Å–æ–≤ –∑–∞ {user_data.get('price')} —Ä—É–±–ª–µ–π.",
        reply_markup=get_admin_confirm_keyboard(user_id)
    )
    await callback.message.edit_text(
        "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", 
        reply_markup=to_home_menu_inline()
    )
    await state.set_state(DonateStates.admin_confirmation)

@router.callback_query(F.data.startswith("admin_cancel_"))
async def donate_admin_cancel(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    try:
        await callback.message.bot.send_message(
            user_id,
            "‚ùå –í–∞—à –¥–æ–Ω–∞—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=to_home_menu_inline()
        )
        await callback.message.edit_text(f"‚ùå –î–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ–Ω–∞—Ç–∞: {str(e)}")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("admin_contact_"))
async def donate_admin_contact(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    try:
        await callback.message.bot.send_message(
            user_id,
            "üëã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=to_home_menu_inline()
        )
        await callback.message.edit_text(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id})")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    await callback.answer()

@router.callback_query(F.data.startswith("admin_send_code_"))
async def donate_admin_send_code(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await state.update_data(user_id=user_id)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await state.set_state(DonateStates.entering_code)
    await callback.answer()

@router.message(DonateStates.entering_code)
async def donate_process_code(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_id = data.get("user_id")
        
        if not user_id:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=to_home_menu_inline()
            )
            await state.clear()
            return
            
        if not message.text:
            await message.answer(
                "‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_navigation_keyboard()
            )
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.send_message(
            user_id,
            f"üéÆ –í–∞—à –∫–æ–¥: {message.text}\n\n"
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –∏–≥—Ä—É\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞'\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥",
            reply_markup=to_home_menu_inline()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞
        review_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_reviews_{user_id}_{data.get('price')}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
        ])
        
        await message.bot.send_message(
            user_id,
            "–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –ø–æ–∫—É–ø–∫–µ!",
            reply_markup=review_keyboard
        )
        
        await message.answer("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}",
            reply_markup=to_home_menu_inline()
        )
        await state.clear()
