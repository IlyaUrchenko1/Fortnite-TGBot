from aiogram import F
from aiogram import Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from utils.database import Database
from keyboards.user_keyboards import to_home_menu_inline

router = Router()
db = Database()

ADMIN_GROUP_CHAT_ID = -1002389059389

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class DonateStates(StatesGroup):
    choosing_type = State()
    choosing_package = State()
    confirming = State()
    entering_credentials = State()
    entering_code = State()
    admin_confirmation = State()

# –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_menu_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]]
    )

def get_back_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")]]
    )

def get_donate_type_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíª –° –∑–∞—Ö–æ–¥–æ–º –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç", callback_data="donate_with_login")],
            [InlineKeyboardButton(text="üö´ –ë–µ–∑ –∑–∞—Ö–æ–¥–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç", callback_data="donate_without_login")]
        ]
    )

def get_admin_confirm_keyboard_no_login(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"admin_contact_{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{user_id}"),
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥", callback_data=f"admin_send_code_{user_id}")
        ]
    ])

def get_admin_confirm_keyboard_login(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"admin_contact_{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{user_id}"),
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ", callback_data=f"admin_confirm_donate_{user_id}")
        ]
    ])

def get_packages_keyboard(donate_type: str):
    keyboards = {
        "with_login": InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="1000 –≤-–±–∞–∫—Å–æ–≤ - 950‚ÇΩ", callback_data="package_1000_login")],
                [InlineKeyboardButton(text="2800 –≤-–±–∞–∫—Å–æ–≤ - 1800‚ÇΩ", callback_data="package_2800_login")],
                [InlineKeyboardButton(text="5000 –≤-–±–∞–∫—Å–æ–≤ - 2600‚ÇΩ", callback_data="package_5000_login")],
                [InlineKeyboardButton(text="13500 –≤-–±–∞–∫—Å–æ–≤ - 6500‚ÇΩ", callback_data="package_13500_login")]
            ]
        ),
        "without_login": InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="1000 –≤-–±–∞–∫—Å–æ–≤ - 1300‚ÇΩ", callback_data="package_1000_nologin")],
                [InlineKeyboardButton(text="2800 –≤-–±–∞–∫—Å–æ–≤ - 2150‚ÇΩ", callback_data="package_2800_nologin")],
                [InlineKeyboardButton(text="5000 –≤-–±–∞–∫—Å–æ–≤ - 2950‚ÇΩ", callback_data="package_5000_nologin")],
                [InlineKeyboardButton(text="13500 –≤-–±–∞–∫—Å–æ–≤ - 6850‚ÇΩ", callback_data="package_13500_nologin")]
            ]
        )
    }
    return keyboards.get(donate_type, keyboards["without_login"])

def get_confirm_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="code_confirm_donate")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="code_cancel_donate")]
        ]
    )

# –°—Ç–∞—Ä—Ç –¥–æ–Ω–∞—Ç–∞
@router.callback_query(F.data == "shop_code_donate")
async def donate_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–Ω–∞—Ç–∞:",
        reply_markup=get_donate_type_keyboard()
    )
    await state.set_state(DonateStates.choosing_type)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–Ω–∞—Ç–∞
@router.callback_query(F.data.startswith("donate_"))
async def donate_choose_type(callback: CallbackQuery, state: FSMContext):
    donate_type = callback.data.split("_", 1)[1]
    await state.update_data(donate_type=donate_type)
    await callback.message.edit_text(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:",
        reply_markup=get_packages_keyboard(donate_type)
    )
    await state.set_state(DonateStates.choosing_package)

# –í—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞
@router.callback_query(F.data.startswith("package_"))
async def donate_choose_package(callback: CallbackQuery, state: FSMContext):
    package_data = callback.data.split("_")
    amount, login_type = package_data[1], package_data[2]

    prices = {
        "1000": "950‚ÇΩ" if login_type == "login" else "1300‚ÇΩ",
        "2800": "1800‚ÇΩ" if login_type == "login" else "2150‚ÇΩ",
        "5000": "2600‚ÇΩ" if login_type == "login" else "2950‚ÇΩ",
        "13500": "6500‚ÇΩ" if login_type == "login" else "6850‚ÇΩ"
    }

    try:
        price = prices[amount]
    except KeyError:
        await callback.message.edit_text(
            "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_menu_keyboard()
        )
        await state.clear()
        return

    await state.update_data(amount=amount, price=price)

    await callback.message.edit_text(
        f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ {amount} –≤-–±–∞–∫—Å–æ–≤ –∑–∞ {price}. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?",
        reply_markup=get_confirm_keyboard()
    )
    await state.set_state(DonateStates.confirming)

@router.callback_query(F.data == "code_cancel_donate")
async def donate_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –î–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=to_home_menu_inline())
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–∞
@router.callback_query(F.data == "code_confirm_donate")
async def donate_confirm(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    donate_type = user_data.get("donate_type")
    user_id = callback.from_user.id
    await state.update_data(user_id=user_id)
    
    if donate_type == "with_login":
        await callback.message.edit_text("üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        await state.set_state(DonateStates.entering_credentials)
    elif donate_type == "without_login":
        await callback.message.bot.send_message(
            ADMIN_GROUP_CHAT_ID, 
            f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏–ª –∫–æ–¥ –Ω–∞ {user_data.get('amount')} –≤-–±–∞–∫—Å–æ–≤ –∑–∞ {user_data.get('price')} —Ä—É–±–ª–µ–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –∫–æ–¥.", 
            reply_markup=get_admin_confirm_keyboard_no_login(user_id)
        )
        
        await callback.message.edit_text("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=to_home_menu_inline())
        await state.set_state(DonateStates.admin_confirmation)
        
    await callback.answer()

@router.callback_query(F.data.startswith("admin_confirm_donate_"))
async def donate_confirm_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = int(callback.data.split("_")[-1])
    
    if user_id:
        await callback.message.bot.send_message(user_id, "‚úÖ –í–∞—à –¥–æ–Ω–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
        await callback.message.bot.send_message(user_id, "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await callback.message.edit_text("‚úÖ –î–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
    else:
        await callback.message.edit_text("‚úÖ –î–æ–Ω–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    
    await state.clear()

@router.callback_query(F.data.startswith("admin_cancel_"))
async def donate_admin_cancel(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    
    if user_id:
        await callback.message.bot.send_message(user_id, "‚ùå –í–∞—à –¥–æ–Ω–∞—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    
    await callback.message.edit_text("‚ùå –î–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith("admin_contact_"))
async def donate_admin_contact(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    
    if user_id:
        await callback.message.bot.send_message(user_id, "üëã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")
        await callback.message.edit_text(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id})")
    else:
        await callback.message.edit_text("‚úâÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin_send_code_"))
async def donate_admin_send_code(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[-1])
    await state.update_data(user_id=user_id)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await state.set_state(DonateStates.entering_code)
    await callback.answer()

@router.message(DonateStates.entering_code)
async def donate_process_code(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_id = data.get("user_id")
        
        if not user_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        if not message.text:
            await message.answer("‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
            
        await message.bot.send_message(
            user_id, 
            f"üéÆ –í–∞—à –∫–æ–¥: {message.text}\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n1. –ó–∞–π–¥–∏—Ç–µ –≤ –∏–≥—Ä—É\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞'\n3. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥"
        )
        await message.answer("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
        await state.clear()

@router.message(DonateStates.entering_credentials)
async def donate_enter_credentials(message: Message, state: FSMContext):
    try:
        msg = message.text.split()
        if len(msg) < 2:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
            return
            
        nickname = msg[0]
        password = msg[1]

        data = await state.get_data()
        amount = data.get("amount")
        price = data.get("price")
        user_id = message.from_user.id
        
        await state.update_data(user_id=user_id)
        
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        await message.bot.send_message(
            ADMIN_GROUP_CHAT_ID,
            f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É–ø–∏–ª –∫–æ–¥ –Ω–∞ {amount} –≤-–±–∞–∫—Å–æ–≤ –∑–∞ {price} —Ä—É–±–ª–µ–π.\n"
            f"–ù–∏–∫: {nickname}\n–ü–∞—Ä–æ–ª—å: {password}\n\n"
            "–í–∞–º –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.",
            reply_markup=get_admin_confirm_keyboard_login(user_id)
        )
        
        await message.answer("‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=to_home_menu_inline())
        await state.set_state(DonateStates.admin_confirmation)
        
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await state.clear()
