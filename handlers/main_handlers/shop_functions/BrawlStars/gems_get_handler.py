from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.database import Database
from utils.constants import GROUP_ID_SERVICE_PROVIDER, ADMIN_IDS
from keyboards.user_keyboards import to_home_menu_inline
from aiogram.types import InputMediaPhoto
import asyncio
from typing import List
router = Router()
db = Database()

class GemsPurchaseStates(StatesGroup):
    waiting_for_email = State()
    waiting_for_comment = State()
    waiting_for_code = State()
    confirming = State()
    waiting_for_admin_photos = State()
    waiting_for_admin_comment = State()

GEMS_PRICES = {
    "30": {"amount": "30+3", "price": 300},
    "80": {"amount": "80+8", "price": 700}, 
    "170": {"amount": "170+17", "price": 1250},
    "360": {"amount": "360+36", "price": 2550},
    "950": {"amount": "950+95", "price": 6000},
    "2000": {"amount": "2000+200", "price": 11500}
}

def get_gems_keyboard():
    buttons = []
    for amount in GEMS_PRICES.keys():
        buttons.append([
            InlineKeyboardButton(
                text=f"{GEMS_PRICES[amount]['amount']} –≥–µ–º–æ–≤ - {GEMS_PRICES[amount]['price']}‚ÇΩ",
                callback_data=f"buy_gems_{amount}"
            )
        ])
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="brawl_stars"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "brawl_stars_gems")
async def show_gems_menu(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            text=(
                "üíé <b>–ü–æ–∫—É–ø–∫–∞ –≥–µ–º–æ–≤ –≤ Brawl Stars</b>\n\n"
                "üìù <b>–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏:</b>\n"
                "1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤\n"
                "2. –£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "4. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –Ω–∞ –ø–æ—á—Ç—É\n"
                "5. –ü–æ–ª—É—á–∏—Ç–µ –≥–µ–º—ã –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤\n\n"
                "‚ö†Ô∏è <i>–í–∞–∂–Ω–æ: –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>"
            ),
            reply_markup=get_gems_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("buy_gems_"))
async def handle_gems_purchase(callback: CallbackQuery, state: FSMContext):
    try:
        amount = callback.data.split("_")[2]
        gems_info = GEMS_PRICES[amount]
        
        user = db.get_user(str(callback.from_user.id))
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if user[3] < gems_info["price"]:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
            return

        await state.update_data(
            gems_amount=gems_info["amount"],
            price=gems_info["price"],
            user_id=callback.from_user.id,
            username=callback.from_user.username or "–ù–µ—Ç username"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_purchase")]
        ])

        await callback.message.edit_text(
            "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç—É –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Brawl Stars:",
            reply_markup=keyboard
        )
        await state.set_state(GemsPurchaseStates.waiting_for_email)
        
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()

@router.message(GemsPurchaseStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    try:
        if not message.text or "@" not in message.text or "." not in message.text:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π email –∞–¥—Ä–µ—Å.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_purchase")]
                ])
            )
            return
            
        await state.update_data(email=message.text.strip())
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_purchase")]
        ])
        
        await message.answer(
            "üí≠ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=keyboard
        )
        await state.set_state(GemsPurchaseStates.waiting_for_comment)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.callback_query(lambda c: c.data == "skip_comment")
async def skip_comment(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        await process_order(callback.message, "–Ω–µ—Ç", state)
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.message(GemsPurchaseStates.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    try:
        await process_order(message, message.text, state)
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

async def process_order(message: Message, comment: str, state: FSMContext):
    try:
        data = await state.get_data()
        if not data:
            await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞
        db.update_user(str(data["user_id"]), balance=-data["price"])
        
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"admin_cancel_{data['user_id']}"),
                InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", url=f"tg://user?id={data['user_id']}")
            ],
            [
                InlineKeyboardButton(text="üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥", callback_data=f"admin_request_code_{data['user_id']}")
            ]
        ])

        await message.bot.send_message(
            chat_id=GROUP_ID_SERVICE_PROVIDER,
            text=(
                f"üõç <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≥–µ–º–æ–≤!</b>\n\n"
                f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{data['username']}\n"
                f"üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['gems_amount']}\n"
                f"üí∞ –°—É–º–º–∞: {data['price']}‚ÇΩ\n"
                f"üìß –ü–æ—á—Ç–∞: {data['email']}\n"
                f"üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            ),
            reply_markup=admin_keyboard,
            parse_mode="HTML"
        )

        await message.answer(
            "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=to_home_menu_inline()
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        if data and "price" in data and "user_id" in data:
            db.update_user(str(data["user_id"]), balance=data["price"])
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("admin_cancel_"))
async def handle_admin_cancel(callback: CallbackQuery):
    try:
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        user_id = callback.data.split("_")[2]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_data = await callback.bot.get_state(user_id)
        if user_data and "price" in user_data:
            db.update_user(user_id, balance=user_data["price"])
        
        await callback.bot.send_message(
            chat_id=user_id,
            text="‚ùå –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
            reply_markup=to_home_menu_inline()
        )
        
        await callback.message.edit_text(
            callback.message.text + "\n\n‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=None
        )
        
        await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω")
        
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("admin_request_code_"))
async def handle_admin_request_code(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        user_id = int(callback.data.split("_")[3])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –∫–æ–¥", callback_data=f"enter_code_{user_id}")]
        ])

        await callback.bot.send_message(
            chat_id=user_id,
            text="üì§ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ—á—Ç—É",
            reply_markup=keyboard
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback.message.edit_text(
            callback.message.text + "\n\nüîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
            reply_markup=None
        )
        
        await callback.answer("–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        print(e)

@router.callback_query(lambda c: c.data.startswith("enter_code_"))
async def start_code_input(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split("_")[2])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_code")]
        ])

        await state.set_state(GemsPurchaseStates.waiting_for_code)
        await state.update_data(
            admin_message_id=callback.message.message_id,
            admin_chat_id=callback.message.chat.id,
            user_id=user_id,
            attempts=0
        )

        await callback.message.edit_text(
            "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ—á—Ç—É:\n\n"
            "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞",
            reply_markup=keyboard
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(GemsPurchaseStates.waiting_for_code)
async def process_code(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        
        if not data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
            
        if message.from_user.id != data.get("user_id"):
            return
            
        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π", callback_data=f"wrong_code_{message.from_user.id}"),
                InlineKeyboardButton(text="‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π", callback_data=f"gems_admin_confirm_{message.from_user.id}")
            ]
        ])

        await message.bot.send_message(
            chat_id=GROUP_ID_SERVICE_PROVIDER,
        text=(
            "üîë –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–ù–µ—Ç username'}\n"
            f"üìù –ö–æ–¥: <code>{message.text}</code>"
            ),
            parse_mode="HTML",
            reply_markup=admin_keyboard
        )
            
        
        await message.answer(
            "‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        )
        
        await state.set_state(GemsPurchaseStates.confirming)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.callback_query(lambda c: c.data.startswith("wrong_code_"))
async def handle_wrong_code(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        user_id = int(callback.data.split("_")[2])
        data = await state.get_data()
        attempts = data.get("attempts", 0) + 1
        
        if attempts >= 3:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="brawl_stars_gems")]
            ])
            
            await callback.bot.send_message(
                chat_id=user_id,
                text=(
                    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞!\n"
                    "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—á—Ç–æ–π"
                ),
                reply_markup=keyboard
            )
            await state.clear()
            
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –∫–æ–¥", callback_data=f"enter_code_{user_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_code")]
            ])
            
            await callback.bot.send_message(
                chat_id=user_id,
                text=(
                    f"‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3-attempts}\n"
                    "üì§ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ"
                ),
                reply_markup=keyboard
            )
            
            await state.update_data(attempts=attempts)
        
        await callback.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("gems_admin_confirm_"))
async def handle_admin_confirm(callback: CallbackQuery, state: FSMContext):
    try:
        if callback.from_user.id not in ADMIN_IDS:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
            return

        user_id = int(callback.data.split("_")[3])
        await state.update_data(user_id=user_id, photos=[])
        await state.set_state(GemsPurchaseStates.waiting_for_admin_photos)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ", callback_data=f"finish_photos_{user_id}")],
            [InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"skip_photos_{user_id}")]
        ])
        
        await callback.message.answer(
            "üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π\n"
            "2Ô∏è‚É£ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n" 
            "3Ô∏è‚É£ –ö–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ, –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'\n\n"
            "‚ö†Ô∏è –í–∞–∂–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É!",
            reply_markup=keyboard
        )
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(GemsPurchaseStates.waiting_for_admin_photos, F.photo)
async def handle_admin_photo(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        photos = data.get("photos", [])
        photo_id = message.photo[-1].file_id
        photos.append(photo_id)
        await state.update_data(photos=photos)
        
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ #{len(photos)} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"
            "üì§ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'"
        )
            
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(lambda c: c.data.startswith("finish_photos_"))
async def finish_photos(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split("_")[2])
        data = await state.get_data()
        photos = data.get("photos", [])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"skip_comment_{user_id}")]
        ])

        photo_count = len(photos)
        await state.set_state(GemsPurchaseStates.waiting_for_admin_comment)
        await callback.message.answer(
            f"üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photo_count}\n"
            "üí¨ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("skip_photos_"))
async def skip_photos(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = int(callback.data.split("_")[2])
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"skip_comment_{user_id}")]
        ])
        
        await state.set_state(GemsPurchaseStates.waiting_for_admin_comment)
        await callback.message.answer(
            "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(GemsPurchaseStates.waiting_for_admin_comment)
async def handle_admin_comment_and_finish(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_id = data.get("user_id")
        photos = data.get("photos", [])
        price = data.get("price", 0)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_review_{user_id}_{price}")],
            [InlineKeyboardButton(text="üè™ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
        ])

        completion_text = (
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
            "üíé –ì–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç\n\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}\n\n"
            "üåü –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ø–æ–∫—É–ø–∫–µ"
        )

        try:
            if photos:
                media = [InputMediaPhoto(media=photos[0], caption=completion_text)]
                media.extend([InputMediaPhoto(media=photo) for photo in photos[1:]])
                
                await message.bot.send_media_group(chat_id=user_id, media=media)
                await message.bot.send_message(
                    chat_id=user_id,
                    text="üîΩ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                    reply_markup=keyboard
                )
            else:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=completion_text,
                    reply_markup=keyboard
                )
            
            await message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
            
        finally:
            await state.clear()
            
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.callback_query(F.data == "cancel_code")
async def cancel_code(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
    ])
    
    await callback.message.edit_text(
        "‚ùå –í–≤–æ–¥ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=keyboard
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel_purchase")
async def cancel_purchase(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        if data and "user_id" in data and "price" in data:
            db.update_user(str(data["user_id"]), balance=data["price"])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
        ])
        
        await callback.message.edit_text(
            "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=keyboard
        )
        
        await state.clear()
        await callback.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        await callback.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        await state.clear()
