from aiogram import F, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from utils.database import Database
from keyboards.user_keyboards import to_home_menu_inline
from utils.constants import GROUP_ID_SERVICE_PROVIDER

router = Router()
db = Database()

class AccountLoginStates(StatesGroup):
    choosing_package = State()
    confirming = State()
    entering_credentials = State()
    admin_confirmation = State()

def get_packages_keyboard():
    packages = [
        ("1000 –≤-–±–∞–∫—Å–æ–≤ - 950‚ÇΩ", "acc_package_1000"),
        ("2800 –≤-–±–∞–∫—Å–æ–≤ - 1800‚ÇΩ", "acc_package_2800"), 
        ("5000 –≤-–±–∞–∫—Å–æ–≤ - 3000‚ÇΩ", "acc_package_5000"),
        ("13500 –≤-–±–∞–∫—Å–æ–≤ - 6500‚ÇΩ", "acc_package_13500")
    ]
    
    buttons = [[InlineKeyboardButton(text=text, callback_data=data)] 
               for text, data in packages]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_shop")])
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_keyboard():
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="acc_confirm_donate")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="acc_cancel_donate")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_packages")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "shop_account_donate")
async def account_donate_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üéÆ <b>–î–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</b>\n\n"
        "‚ÑπÔ∏è –ú—ã –∑–∞–π–¥–µ–º –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –∏–∑–º–µ–Ω–∏–º —Ä–µ–≥–∏–æ–Ω –∏ –ø–æ–ø–æ–ª–Ω–∏–º –≤-–±–∞–∫—Å—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–∞–∫–µ—Ç:",
        reply_markup=get_packages_keyboard()
    )
    await state.set_state(AccountLoginStates.choosing_package)

@router.callback_query(F.data == "back_to_packages")
async def back_to_packages(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø–∞–∫–µ—Ç:",
        reply_markup=get_packages_keyboard()
    )
    await state.set_state(AccountLoginStates.choosing_package)

@router.callback_query(F.data.startswith("acc_package_"))
async def account_choose_package(callback: CallbackQuery, state: FSMContext):
    amount = callback.data.split("_")[2]
    
    prices = {
        "1000": "950‚ÇΩ",
        "2800": "1800‚ÇΩ",
        "5000": "3000‚ÇΩ",
        "13500": "6500‚ÇΩ"
    }

    try:
        price = prices[amount]
        price_num = int(price.replace("‚ÇΩ", ""))
        user_balance = db.get_user(str(callback.from_user.id)).get("balance", 0)
        
        if user_balance < price_num:
            await callback.message.edit_text(
                f"‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance}‚ÇΩ\n"
                f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞: {price}\n"
                f"üîÑ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å: {price_num - user_balance}‚ÇΩ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_packages")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
                ])
            )
            return

        await state.update_data(amount=amount, price=price)
        await callback.message.edit_text(
            f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ {amount} –≤-–±–∞–∫—Å–æ–≤ –∑–∞ {price}\n\n"
            "‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä?",
            reply_markup=get_confirm_keyboard()
        )
        await state.set_state(AccountLoginStates.confirming)
    except KeyError:
        await callback.message.edit_text(
            "‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_packages_keyboard()
        )

@router.callback_query(F.data == "acc_cancel_donate")
async def account_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚ùå –î–æ–Ω–∞—Ç –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="shop_account_donate")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
        ])
    )
    await state.clear()

@router.callback_query(F.data == "acc_confirm_donate")
async def account_confirm(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_packages")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
    ])
    
    await callback.message.edit_text(
        "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å</code>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AccountLoginStates.entering_credentials)

@router.message(AccountLoginStates.entering_credentials)
async def process_credentials(message: Message, state: FSMContext):
    try:
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        credentials = message.text.split()
        if len(credentials) != 2:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
            
        login, password = credentials
        data = await state.get_data()
        
        admin_message = (
            "üéÆ <b>–ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!</b>\n\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
            f"üîó Username: @{message.from_user.username}\n"
            f"üÜî ID: <code>{message.from_user.id}</code>\n"
            f"üí∞ –ü–∞–∫–µ—Ç: {data['amount']} –≤-–±–∞–∫—Å–æ–≤\n"
            f"üíµ –°—É–º–º–∞: {data['price']}\n"
            f"üìß –õ–æ–≥–∏–Ω: {login}\n"
            f"üîë –ü–∞—Ä–æ–ª—å: {password}"
        )

        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± –°–≤—è–∑–∞—Ç—å—Å—è", url=f"tg://user?id={message.from_user.id}")],
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_acc_confirm_{message.from_user.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_acc_reject_{message.from_user.id}")
            ]
        ])

        await message.bot.send_message(
            GROUP_ID_SERVICE_PROVIDER,
            admin_message,
            reply_markup=admin_keyboard,
            parse_mode="HTML"
        )

        await message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=to_home_menu_inline()
        )
        await state.clear()

    except Exception as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="acc_confirm_donate")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
        ])
        
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=keyboard
        )

@router.callback_query(F.data.startswith("admin_acc_confirm_"))
async def admin_confirm_account(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[3])
    
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚≠êÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"leave_reviews_{user_id}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")]
        ])
        
        await callback.bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
            "‚è≥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –≤—ã–ø–æ–ª–Ω–∏—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.",
            reply_markup=keyboard
        )
        
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data.startswith("admin_acc_reject_"))
async def admin_reject_account(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[3])
    
    try:
        await callback.bot.send_message(
            user_id,
            "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=to_home_menu_inline()
        )
        
        await callback.message.edit_text(
            callback.message.text + "\n\n‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            parse_mode="HTML"
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
