from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.database import Database
import random
from datetime import datetime
import secrets

from keyboards.profile_keyboards import get_profile_keyboard, get_back_keyboard
from keyboards.user_keyboards import to_home_menu_inline
from utils.varibles import NICK_BOT, COURSE_V_BAKS_TO_RUBLE


router = Router()
db = Database()


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    try:
        try:
            await callback.message.bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id + 1
            )
        except:
            print("delete_message error in show_profile")
            pass
            
        await callback.message.delete()
        
        user_data = db.get_user(str(callback.from_user.id))
        system_id = ''.join([str(random.randint(0, 9)) for _ in range(8)])
        
        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üî¢ ID –≤ —Å–∏—Å—Ç–µ–º–µ: #{system_id}\n"
            f"üì± Telegram ID: {callback.from_user.id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data[3]}‚ÇΩ\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(db.get_referrals(str(callback.from_user.id)))}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.answer(
            text=profile_text,
            reply_markup=get_profile_keyboard()
        )
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

class BalanceStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_payment = State()

@router.callback_query(F.data == "add_balance") 
async def add_balance(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(BalanceStates.waiting_for_amount)

@router.message(BalanceStates.waiting_for_amount)
async def process_balance_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 100 or amount > 15000:
            raise ValueError
            
        await state.update_data(amount=amount)
        
        await message.answer(
            f"üíé –í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ {amount}‚ÇΩ, –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ –±–∞–ª–∞–Ω—Å {amount}‚ÇΩ ü§©\n\n"
            "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:\n"
            "<code>2200 7006 3518 1125</code>\n\n"
            "üì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞",
            reply_markup=get_back_keyboard()
        )
        await state.set_state(BalanceStates.waiting_for_payment)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ—Ç 100‚ÇΩ –¥–æ 15000‚ÇΩ",
            reply_markup=get_back_keyboard()
        )

@router.message(BalanceStates.waiting_for_payment)
async def process_payment_screenshot(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ",
            reply_markup=get_back_keyboard()
        )
        return
    
    data = await state.get_data()
    
    await message.bot.send_photo(
        chat_id="-1002360777828",
        photo=message.photo[-1].file_id,
        caption=(
            "üí∞ <b>–ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
            f"üíµ –°—É–º–º–∞: {data['amount']}‚ÇΩ\n"
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_balance_{message.from_user.id}_{data['amount']}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_balance_{message.from_user.id}")
            ]
        ])
    )
    
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã",
        reply_markup=get_back_keyboard()
    )
    
    await state.clear()

@router.callback_query(F.data.startswith("approve_balance_"))
async def approve_balance_payment(callback: CallbackQuery):
    user_id = callback.data.split("_")[2]
    amount = int(callback.data.split("_")[3])
    
    db.update_user(user_id, balance=amount)
    
    await callback.bot.send_message(
        chat_id=user_id,
        text=(
            "‚úÖ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"üíé –ù–∞—á–∏—Å–ª–µ–Ω–æ: {amount}‚ÇΩ"
        ),
        reply_markup=get_back_keyboard()
    )
    
    await callback.message.edit_reply_markup()
    await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

@router.callback_query(F.data.startswith("reject_balance_"))
async def reject_balance_payment(callback: CallbackQuery):
    user_id = callback.data.split("_")[2]
    
    await callback.bot.send_message(
        chat_id=user_id,
        text=(
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
            "üí≠ –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        ),
        reply_markup=get_back_keyboard()
    )
    
    await callback.message.edit_reply_markup()
    await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

class PromoStates(StatesGroup):
    waiting_for_promo = State()

@router.callback_query(F.data == "use_promo")
async def use_promo(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "üéü <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(PromoStates.waiting_for_promo)

@router.message(PromoStates.waiting_for_promo)
async def process_promo(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞.",
            reply_markup=get_back_keyboard()
        )
        return
    
    try:
        promo_code = message.text.upper()
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞
        promo_data = db.get_promocode(promo_code)
        
        if not promo_data:
            await message.answer(
                "‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        valid_until = datetime.strptime(promo_data[5], "%Y-%m-%d %H:%M:%S")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å 5 –≤–º–µ—Å—Ç–æ 4
        if datetime.now() > valid_until:
            await message.answer(
                "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫!",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        current_uses = promo_data[4] if promo_data[4] else 0
        max_uses = promo_data[3]
        if max_uses and current_uses >= max_uses:
            await message.answer(
                "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
        if user_id in db.get_promo_users(promo_code):
            await message.answer(
                "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
            
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        amount_of_money = promo_data[7]
        amount_of_sale = promo_data[8]
        
        if amount_of_money:  # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
            db.update_user(user_id, balance=amount_of_money)
            success_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount_of_money} V-Bucks"
        elif amount_of_sale:  # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
            db.update_user(user_id, amount_of_sale=amount_of_sale)
            success_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É {amount_of_sale}% –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É"
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
        db.update_promocode(promo_code, amount_uses=1)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        db.update_promocode(promo_code, who_used_telegram_id=user_id)
        
        await message.answer(success_text, reply_markup=get_back_keyboard())
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - {e}",
            reply_markup=get_back_keyboard()
        )
        await state.clear()

    

class GiftCertificateStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_payment = State()

@router.callback_query(F.data == "buy_certificate")
async def buy_certificate(callback: CallbackQuery, state: FSMContext):
	await callback.message.delete()
	await callback.message.answer(
		"üéÅ <b>–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞</b>\n\n"
		"üíù –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–æ—Ç 110‚ÇΩ –¥–æ 15000‚ÇΩ):\n\n"
		"üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000",
		reply_markup=get_back_keyboard()
	)
	await state.set_state(GiftCertificateStates.waiting_for_amount)

@router.message(GiftCertificateStates.waiting_for_amount)
async def process_certificate_amount(message: Message, state: FSMContext):
	try:
		amount = float(message.text)
		if amount < 110 or amount > 15000:
			raise ValueError
			
		v_bucks = int(amount / COURSE_V_BAKS_TO_RUBLE)
		
		# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
		promo_code = f"GIFT_{secrets.token_hex(8).upper()}"
		
		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
		await state.update_data(amount=amount, v_bucks=v_bucks, promo_code=promo_code)
		
		preview_text = (
			"üéä <b>–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç Fortnite</b> üéä\n\n"
			"üéÆ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!\n\n"
			f"üí∞ –ù–æ–º–∏–Ω–∞–ª: {v_bucks} V-Bucks\n"
			f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n\n"
			"üìù –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:\n"
			"1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª\n"
			"2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥¬ª\n"
			"3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n"
			"üí´ –ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!\n"
			"ü§ù –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Fortnite Shop"
		)
		
		await message.answer(f"üìú –¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:\n\n{preview_text}")
        
		await message.answer(f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n<code>2200 7006 3518 1125</code>\n\nüì∏ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞")
		await state.set_state(GiftCertificateStates.waiting_for_payment)
		
	except ValueError:
		await message.answer(
			"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –æ—Ç 110‚ÇΩ –¥–æ 15000‚ÇΩ",
			reply_markup=get_back_keyboard()
		)

@router.message(GiftCertificateStates.waiting_for_payment)
async def process_payment(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞, —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ",
            reply_markup=get_back_keyboard()
        )
        return

    data = await state.get_data()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    await message.bot.send_photo(
        chat_id="-1002360777828",
        photo=message.photo[-1].file_id,
        caption=(
            "üîî <b>–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞!</b>\n\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
            f"üí∞ –°—É–º–º–∞: {data['amount']}‚ÇΩ ({data['v_bucks']} V-Bucks)\n"
            f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: <code>{data['promo_code']}</code>"
        ),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_cert_{message.from_user.id}_{data['v_bucks']}_{data['promo_code']}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_cert_{message.from_user.id}")
            ]
        ])
    )
    
    await message.answer(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
        "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã",
        reply_markup=get_back_keyboard()
    )
    
    await state.clear()

@router.callback_query(F.data.startswith("approve_cert_"))
async def approve_certificate(callback: CallbackQuery):
	user_id = callback.data.split("_")[2]
	promo_code = f"{callback.data.split('_')[4]}_{callback.data.split('_')[5]}"
	v_bucks = callback.data.split("_")[3]
	
	# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
	db.add_promocode(
		code=promo_code,
		creator_id=user_id,
		max_uses=1,
		valid_until="2099-12-31 00:00:00",
		amount_of_money=v_bucks,
		amount_of_sale=None
	)
	
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	await callback.bot.send_message(
		chat_id=user_id,
		text="üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n"
		"üì® –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
        reply_markup=to_home_menu_inline()
	)
	
	await callback.bot.send_message(
		chat_id=user_id,
		text=(
			"üéä <b>–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç Fortnite</b> üéä\n\n"
			"üéÆ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!\n\n"
			f"üí∞ –ù–æ–º–∏–Ω–∞–ª: {v_bucks} V-Bucks\n"
			f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n\n"
			"üìù –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:\n"
			"1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª\n"
			"2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥¬ª\n"
			"3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n"
			"üí´ –ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!\n"
			"ü§ù –° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Fortnite Shop"
		)
	)
	
	await callback.message.edit_reply_markup()
	await callback.answer("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!")

@router.callback_query(F.data.startswith("reject_cert_"))
async def reject_certificate(callback: CallbackQuery):
	user_id = callback.data.split("_")[2]
	
	await callback.bot.send_message(
		chat_id=user_id,
		text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
		"üí≠ –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
		reply_markup=get_back_keyboard()
	)
	
	await callback.message.edit_reply_markup()
	await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    
@router.callback_query(F.data == "referral_system")
async def referral_system(callback: CallbackQuery):
    await callback.message.delete()
    
    user_id = callback.from_user.id
    ref_link = f"https://t.me/{NICK_BOT}?start={user_id}"
    
    ref_text = (
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
        "üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "üí∞ 15 —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å\n\n"
        "üì± –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>{ref_link}</code>\n\n"
        "üì¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
        "‚ùóÔ∏è –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    await callback.message.answer(
        text=ref_text,
        reply_markup=get_back_keyboard()
    )


