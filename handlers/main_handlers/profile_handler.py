from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.database import Database
import random
from datetime import datetime

from keyboards.profile_keyboards import get_profile_keyboard, get_back_keyboard
from utils.varibles import NICK_BOT


router = Router()
db = Database()


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    try:
        try:
            await callback.message.bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id + 1
            )
        except:
            print("delete_message error in show_profile")
            pass
            
        await callback.message.delete()
        
        user_data = db.get_user(str(callback.from_user.id))
        system_id = ''.join([str(random.randint(0, 9)) for _ in range(8)])
        
        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üî¢ ID –≤ —Å–∏—Å—Ç–µ–º–µ: #{system_id}\n"
            f"üì± Telegram ID: {callback.from_user.id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data[2]} V-Bucks\n"
            f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(db.get_referrals(str(callback.from_user.id)))}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await callback.message.answer(
            text=profile_text,
            reply_markup=get_profile_keyboard()
        )
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "add_balance")
async def add_balance(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "üí∞ –†–∞–∑–¥–µ–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=get_back_keyboard()
    )

class PromoStates(StatesGroup):
    waiting_for_promo = State()

@router.callback_query(F.data == "use_promo")
async def use_promo(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "üéü <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=get_back_keyboard()
    )
    await state.set_state()

@router.message(PromoStates.waiting_for_promo)
async def process_promo(message: Message, state: FSMContext):
    if not message.text or not message.text.isalnum():
        return
    
    try:
        promo_code = message.text.upper()
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞
        promo_data = db.get_promocode(promo_code)
        
        if not promo_data:
            await message.answer(
                "‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.now() > datetime.strptime(promo_data[4], "%Y-%m-%d %H:%M:%S"):
            await message.answer(
                "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫!",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if promo_data[3] <= 0:
            await message.answer(
                "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
        if user_id in db.get_promo_users(promo_code):
            await message.answer(
                "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
            
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        if promo_data[5]:  # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
            db.update_user(user_id, balance=promo_data[5])
            success_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_data[5]} V-Bucks"
        else:  # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
            db.update_user(user_id, amount_of_sale=promo_data[6])
            success_text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É {promo_data[6]}%"
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
        db.update_promocode(promo_code, amount_uses=1)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        db.update_promocode(promo_code, who_used_telegram_id=user_id)
        
        await message.answer(success_text, reply_markup=get_back_keyboard())
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}",
            reply_markup=get_back_keyboard()
        )
        await state.clear()

@router.message(PromoStates.waiting_for_promo)
async def invalid_promo(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞! –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.",
        reply_markup=get_back_keyboard()
    )

@router.callback_query(F.data == "buy_certificate")
async def buy_certificate(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "üéÅ –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=get_back_keyboard()
    )

@router.callback_query(F.data == "referral_system")
async def referral_system(callback: CallbackQuery):
    await callback.message.delete()
    
    user_id = callback.from_user.id
    ref_link = f"https://t.me/{NICK_BOT}?start={user_id}"
    
    ref_text = (
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
        "üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        "üí∞ 15 —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å\n\n"
        "üì± –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>{ref_link}</code>\n\n"
        "üì¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
        "‚ùóÔ∏è –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    await callback.message.answer(
        text=ref_text,
        reply_markup=get_back_keyboard()
    )
