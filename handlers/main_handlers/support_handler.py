from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.shop_keyboards import get_back_to_shop_keyboard
from keyboards.user_keyboards import to_home_menu_inline
from utils.database import Database
from utils.constants import GROUP_ID_TECH_SUPPORT

router = Router()
db = Database()

class SupportStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_admin_response = State()

@router.callback_query(F.data == "support")
async def start_support_dialog(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    try:
        await callback.message.bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id + 1
        )
    except:
        pass
        
    await callback.message.delete()
    
    await callback.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è (–¥–æ 100 —Å–ª–æ–≤)", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")
        ]
    ]))
    await state.set_state(SupportStates.waiting_for_title)

@router.message(SupportStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    if message.photo:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É.")
        return

    if len(message.text.split()) > 100:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 100 —Å–ª–æ–≤.")
        return

    await state.update_data(title=message.text)
    await message.answer(
        "üì® –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")
            ]
        ])
    )
    await state.set_state(SupportStates.waiting_for_content)

@router.message(SupportStates.waiting_for_content)
async def process_content(message: Message, state: FSMContext):
    data = await state.get_data()
    title = data['title']
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{message.from_user.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{message.from_user.id}")
        ],
    ])
    
    support_text = f"üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫:\n{title}\n\nüìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:\n{message.text or '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    
    if message.photo:
        await message.bot.send_photo(
            chat_id=GROUP_ID_TECH_SUPPORT,
            photo=message.photo[-1].file_id,
            caption=support_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message.bot.send_message(
            chat_id=GROUP_ID_TECH_SUPPORT,
            text=support_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    
    await message.answer(
        "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_home_menu")
            ]
        ])
    )
    
    await state.set_state(SupportStates.waiting_for_admin_response)

@router.callback_query(F.data.startswith("answer_"))
async def admin_answer(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = int(callback.data.split("_")[1])
    await state.update_data(user_id=user_id)
    await callback.message.delete()
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.")
    await state.set_state(SupportStates.waiting_for_admin_response)
    

@router.message(SupportStates.waiting_for_admin_response)
async def send_admin_response(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data['user_id']
    
    response_text = "üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n" + message.text
    
    if message.photo:
        await message.bot.send_photo(
            chat_id=user_id,
            photo=message.photo[-1].file_id,
            caption=response_text,
            parse_mode="HTML",
            reply_markup=to_home_menu_inline()
        )
    else:
        await message.bot.send_message(
            chat_id=user_id,
            text=response_text,
            parse_mode="HTML",
            reply_markup=to_home_menu_inline()
        )
    
    await message.edit_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    await message.delete()
    await state.clear()

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_request(callback: CallbackQuery):
    await callback.answer()
    
    user_id = int(callback.data.split("_")[1])
    await callback.message.delete()
    
    await callback.bot.send_message(
        chat_id=user_id,
        text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
        reply_markup=to_home_menu_inline()
    )
