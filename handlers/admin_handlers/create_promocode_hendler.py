import asyncio

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from utils.database import Database
from utils.constants import ADMIN_IDS
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()
db = Database()

class CreatePromoStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_type = State()
    waiting_for_amount = State()
    waiting_for_max_uses = State()
    waiting_for_valid_days = State()

class EditPromoStates(StatesGroup):
    selecting_field = State()
    editing_code = State()
    editing_type = State()
    editing_amount = State()
    editing_max_uses = State()
    editing_valid_days = State()

def get_back_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="create_promo_by_admin")]
    ])

@router.callback_query(F.data == "create_promo_by_admin")
async def create_promo_start(callback_query: CallbackQuery, state: FSMContext):
    try:
        await callback_query.answer()
        await callback_query.message.delete()
        
        if callback_query.from_user.id not in ADMIN_IDS:
            await callback_query.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
            return

        all_promocodes = db.get_all_promocodes()
        
        if all_promocodes:
            promo_keyboard = InlineKeyboardBuilder()
            for promo in all_promocodes:
                code = promo[1]
                used = str(promo[4]) # Convert to string
                max_uses = str(promo[3]) # Convert to string
                button_text = f"{code} ({used}/{max_uses})"
                promo_keyboard.add(InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"view_promo_{code}"
                ))
            
            promo_keyboard.add(InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥",
                callback_data="new_promo"
            ))
            
            await callback_query.message.answer(
                "üéü <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                "–∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:",
                reply_markup=promo_keyboard.as_markup(resize_keyboard=True)
            )
        else:
            await callback_query.message.answer(
                "üéü <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):"
            )
            await state.set_state(CreatePromoStates.waiting_for_code)
        
    except Exception as e:
        print(f"Error in create_promo_start: {str(e)}")
        await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(CreatePromoStates.waiting_for_code)
async def process_promo_code(message: Message, state: FSMContext):
    try:
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id - 1
            )
        except:
            print("delete_message error in process_promo_code")
            pass
            
        await message.delete()
        
        if not message.text.isalnum():
            await message.answer(
                "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_back_button()
            )
            return
            
        await state.update_data(code=message.text.upper())
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n"
            "1Ô∏è‚É£ - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ V-Bucks\n"
            "2Ô∏è‚É£ - –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2:",
            reply_markup=get_back_button()
        )
        await state.set_state(CreatePromoStates.waiting_for_type)
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(CreatePromoStates.waiting_for_type)
async def process_promo_type(message: Message, state: FSMContext):
    try:
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id - 1
            )
        except:
            print("delete_message error in process_promo_type")
            pass
            
        await message.delete()
        
        if message.text not in ["1", "2"]:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2:",
                reply_markup=get_back_button()
            )
            return
            
        await state.update_data(promo_type=message.text)
        
        if message.text == "1":
            await message.answer(
                "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É V-Bucks –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:",
                reply_markup=get_back_button()
            )
        else:
            await message.answer(
                "üìä –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–æ—Ç 1 –¥–æ 100):",
                reply_markup=get_back_button()
            )
            
        await state.set_state(CreatePromoStates.waiting_for_amount)
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(CreatePromoStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id - 1
            )
        except:
            print("delete_message error in process_amount")
            pass
            
        await message.delete()
        
        try:
            amount = int(message.text)
            data = await state.get_data()
            
            if data["promo_type"] == "2" and (amount < 1 or amount > 100):
                await message.answer(
                    "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    reply_markup=get_back_button()
                )
                return
                
            if amount < 1:
                await message.answer(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    reply_markup=get_back_button()
                )
                return
                
            await state.update_data(amount=amount)
            await message.answer(
                "üì¶ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
                reply_markup=get_back_button()
            )
            await state.set_state(CreatePromoStates.waiting_for_max_uses)
            
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=get_back_button()
            )
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(CreatePromoStates.waiting_for_max_uses)
async def process_max_uses(message: Message, state: FSMContext):
    try:
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id - 1
            )
        except:
            print("delete_message error in process_max_uses")
            pass
            
        await message.delete()
        
        try:
            max_uses = int(message.text)
            if max_uses < 1:
                await message.answer(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    reply_markup=get_back_button()
                )
                return
                
            await state.update_data(max_uses=max_uses)
            await message.answer(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –¥–Ω—è—Ö:",
                reply_markup=get_back_button()
            )
            await state.set_state(CreatePromoStates.waiting_for_valid_days)
            
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=get_back_button()
            )
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(CreatePromoStates.waiting_for_valid_days)
async def process_valid_days(message: Message, state: FSMContext):
    try:
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id - 1
            )
        except:
            print("delete_message error in process_valid_days")
            pass
            
        await message.delete()
        
        try:
            days = int(message.text)
            if days < 1:
                await message.answer(
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                    reply_markup=get_back_button()
                )
                return
                
            data = await state.get_data()
            valid_until = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
            
            amount_of_money = data["amount"] if data["promo_type"] == "1" else None
            amount_of_sale = data["amount"] if data["promo_type"] == "2" else None
            
            db.add_promocode(
                code=data["code"],
                creator_id=str(message.from_user.id),
                max_uses=data["max_uses"],
                valid_until=valid_until,
                amount_of_money=amount_of_money,
                amount_of_sale=amount_of_sale
            )
            
            success_message = (
                "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üéü –ö–æ–¥: {data['code']}\n"
                f"üíé {'–°—É–º–º–∞: ' + str(amount_of_money) + ' V-Bucks' if amount_of_money else '–°–∫–∏–¥–∫–∞: ' + str(amount_of_sale) + '%'}\n"
                f"üì¶ –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {data['max_uses']}\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_until}"
            )
            
            await message.answer(success_message, reply_markup=get_back_button())
            await state.clear()
            await state.set_state(CreatePromoStates.waiting_for_code)
            
        except ValueError:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
                reply_markup=get_back_button()
            )
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {str(e)}")
        await state.clear()

@router.callback_query(F.data.startswith("view_promo_"))
async def view_promo(callback_query: CallbackQuery, state: FSMContext):
    try:
        await callback_query.answer()
        await callback_query.message.delete()
        
        promo_code = callback_query.data.split("view_promo_")[1]
        promo = db.get_promocode(promo_code)
        if not promo:
            await callback_query.message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        id, code, who_created_telegram_id, max_amount_uses, amount_uses, valid_until, who_used_telegram_id, amount_of_money, amount_of_sale = promo

        if amount_of_money:
            promo_type_text = "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ V-Bucks"
        elif amount_of_sale:
            promo_type_text = "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏"
        else:
            promo_type_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞"

        # Convert valid_until to string if it's not already
        valid_until_str = valid_until.strftime("%Y-%m-%d %H:%M:%S") if isinstance(valid_until, datetime) else str(valid_until)

        promo_details = (
            f"‚¨áÔ∏è –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ‚¨áÔ∏è\n\n"
            f"**–ö–æ–¥:** {code}\n"
            f"**–¢–∏–ø:** {promo_type_text}\n"
            f"**–°–∫–æ–ª—å–∫–æ –¥–∞–µ—Ç:** {f'{amount_of_money} V-Bucks' if amount_of_money else f'{amount_of_sale}%'}\n"
            f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:** {amount_uses}/{max_amount_uses}\n"
            f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {amount_uses}\n"
            f"**–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:** {valid_until_str}\n"
        )

        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥", callback_data=f"edit_code_{code}"))
        keyboard.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø", callback_data=f"edit_type_{code}"))
        keyboard.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data=f"edit_amount_{code}"))
        keyboard.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", callback_data=f"edit_max_uses_{code}"))
        keyboard.row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", callback_data=f"edit_valid_days_{code}"))
        keyboard.row(
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data=f"delete_promo_{code}")
        )
        keyboard.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="create_promo_by_admin")
        )

        await callback_query.message.answer(promo_details, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await callback_query.answer()
    except Exception as e:
        await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await callback_query.answer()

@router.callback_query(F.data.startswith("edit_"))
async def edit_promo_callback(callback_query: CallbackQuery, state: FSMContext):
    try:
        action, field, code = callback_query.data.split("_", 2)
        await state.update_data(promo_code=code)

        if field == "code":
            await callback_query.message.answer(
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):",
                reply_markup=get_back_button()
            )
            await state.set_state(EditPromoStates.editing_code)
        elif field == "type":
            await callback_query.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n"
                "1Ô∏è‚É£ - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ V-Bucks\n"
                "2Ô∏è‚É£ - –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2:",
                reply_markup=get_back_button()
            )
            await state.set_state(EditPromoStates.editing_type)
        elif field == "amount":
            data = db.get_promocode(code)
            if data[1] == "1":
                await callback_query.message.answer(
                    "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É V-Bucks –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:",
                    reply_markup=get_back_button()
                )
            else:
                await callback_query.message.answer(
                    "üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–æ—Ç 1 –¥–æ 100):",
                    reply_markup=get_back_button()
                )
            await state.set_state(EditPromoStates.editing_amount)
        elif field == "max":
            await callback_query.message.answer(
                "üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
                reply_markup=get_back_button()
            )
            await state.set_state(EditPromoStates.editing_max_uses)
        elif field == "valid":
            await callback_query.message.answer(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –¥–Ω—è—Ö:",
                reply_markup=get_back_button()
            )
            await state.set_state(EditPromoStates.editing_valid_days)
        elif field == "promo":
            pass

        await callback_query.answer()
    except Exception as e:
        await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await callback_query.answer()

@router.message(EditPromoStates.editing_code)
async def edit_promo_code(message: Message, state: FSMContext):
    try:
        new_code = message.text.strip().upper()
        if not new_code.isalnum():
            await message.answer(
                "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_back_button()
            )
            return

        data = await state.get_data()
        old_code = data['promo_code']

        if db.get_promocode(new_code):
            await message.answer(
                "‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π:",
                reply_markup=get_back_button()
            )
            return

        db.update_promocode(old_code, code=new_code)
        await message.answer(f"‚úÖ –ö–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_code}.")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.message(EditPromoStates.editing_type)
async def edit_promo_type(message: Message, state: FSMContext):
    try:
        promo_type = message.text.strip()
        if promo_type not in ["1", "2"]:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1 –∏–ª–∏ 2:",
                reply_markup=get_back_button()
            )
            return

        data = await state.get_data()
        code = data['promo_code']
        db.update_promocode(code, promo_type=promo_type)

        if promo_type == "1":
            await message.answer(
                "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É V-Bucks –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:",
                reply_markup=get_back_button()
            )
        else:
            await message.answer(
                "üìä –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–æ—Ç 1 –¥–æ 100):",
                reply_markup=get_back_button()
            )

        await state.set_state(EditPromoStates.editing_amount)
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.message(EditPromoStates.editing_amount)
async def edit_promo_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
        data = await state.get_data()
        code = data['promo_code']
        promo = db.get_promocode(code)

        if promo[1] == "2" and (amount < 1 or amount > 100):
            await message.answer(
                "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_back_button()
            )
            return

        if amount < 1:
            await message.answer(
                "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_back_button()
            )
            return

        db.update_promocode(code, amount_of_money=amount)
        await message.answer("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=get_back_button()
        )
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.message(EditPromoStates.editing_max_uses)
async def edit_promo_max_uses(message: Message, state: FSMContext):
    try:
        max_uses = int(message.text.strip())
        if max_uses < 1:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_back_button()
            )
            return

        data = await state.get_data()
        code = data['promo_code']
        db.update_promocode(code, max_amount_uses=max_uses)
        await message.answer("‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=get_back_button()
        )
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.message(EditPromoStates.editing_valid_days)
async def edit_promo_valid_days(message: Message, state: FSMContext):
    try:
        days = int(message.text.strip())
        if days < 1:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=get_back_button()
            )
            return

        data = await state.get_data()
        code = data['promo_code']
        valid_until = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
        db.update_promocode(code, valid_until=valid_until)
        await message.answer(f"‚úÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {valid_until}.")
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=get_back_button()
        )
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.callback_query(F.data.startswith("delete_promo_"))
async def delete_promo(callback_query: CallbackQuery, state: FSMContext):
    try:
        code = callback_query.data.split("delete_promo_")[1]
        db.delete_promocode(code)
        await callback_query.message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        await callback_query.answer()
    except Exception as e:
        await callback_query.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await callback_query.answer()
