from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramBadRequest

from utils.database import Database
from keyboards.user_keyboards import back_to_admin_menu, admin_menu
from utils.constants import ADMIN_IDS

router = Router()
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class NewsletterStates(StatesGroup):
    waiting_for_message = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    waiting_for_photo = State()    # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    confirm_sending = State()      # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

def get_yes_no_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='newsletter_confirm'),
        InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='newsletter_cancel')
    )
    keyboard.row(
        InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin_menu'),
        InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='to_home_menu')
    )
    return keyboard.as_markup()

def get_photo_choice_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text='üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='add_photo'),
        InlineKeyboardButton(text='‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip_photo')
    )
    keyboard.row(
        InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin_menu'),
        InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='to_home_menu')
    )
    return keyboard.as_markup()

@router.callback_query(F.data == "start_newsletter")
async def start_newsletter(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        await callback.message.edit_text(
            "üì® <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=back_to_admin_menu(),
            parse_mode="HTML"
        )
        await state.set_state(NewsletterStates.waiting_for_message)
    except TelegramBadRequest:
        await callback.message.answer(
            "üì® <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=back_to_admin_menu(),
            parse_mode="HTML"
        )
        await state.set_state(NewsletterStates.waiting_for_message)

@router.message(NewsletterStates.waiting_for_message)
async def process_newsletter_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
        
    await state.update_data(text=message.text)
    await message.answer(
        "üé® –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
        reply_markup=get_photo_choice_keyboard()
    )
    await state.set_state(NewsletterStates.waiting_for_photo)

@router.callback_query(NewsletterStates.waiting_for_photo, F.data == "add_photo")
async def add_photo(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ"""
    await callback.answer()
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "‚ùóÔ∏è –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ñ–∞–π–ª"
    )

@router.callback_query(NewsletterStates.waiting_for_photo, F.data == "skip_photo")
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    await callback.answer()
    data = await state.get_data()
    
    preview = f"üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data['text']}"
    await callback.message.edit_text(
        preview,
        reply_markup=get_yes_no_keyboard()
    )
    await state.set_state(NewsletterStates.confirm_sending)

@router.message(NewsletterStates.waiting_for_photo, F.photo)
async def process_newsletter_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    
    data = await state.get_data()
    
    try:
        await message.answer_photo(
            photo=photo_id,
            caption=f"üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data['text']}",
            reply_markup=get_yes_no_keyboard()
        )
        await state.set_state(NewsletterStates.confirm_sending)
    except TelegramBadRequest as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥",
            reply_markup=get_photo_choice_keyboard()
        )

@router.callback_query(NewsletterStates.confirm_sending, F.data == "newsletter_confirm")
async def send_newsletter(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    await callback.answer()
    data = await state.get_data()
    users = db.get_all_users()

    sent_count = 0
    failed_count = 0
    
    status_message = await callback.message.edit_text(
        "üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
    )
    
    for user in users:
        if user[6]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            continue
            
        try:
            if 'photo_id' in data:
                await callback.bot.send_photo(
                    chat_id=user[1],
                    photo=data['photo_id'],
                    caption=data['text']
                )
            else:
                await callback.bot.send_message(
                    chat_id=user[1],
                    text=data['text']
                )
            sent_count += 1
        except Exception:
            failed_count += 1
            continue
    
    await status_message.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì® –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}",
        reply_markup=admin_menu()
    )
    await state.clear()

@router.callback_query(NewsletterStates.confirm_sending, F.data == "newsletter_cancel")
async def cancel_newsletter(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=admin_menu()
    )
    await state.clear()
