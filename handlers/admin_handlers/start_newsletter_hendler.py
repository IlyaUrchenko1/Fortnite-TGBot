from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton

from utils.database import Database
from keyboards.user_keyboards import to_home_menu_inline
from keyboards.user_keyboards import admin_menu, start_bot_menu

from utils.varibles import ADMIN_IDS

router = Router()
db = Database()

class NewsletterStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_photo = State()
    confirm_sending = State()

def get_yes_no_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='newsletter_confirm'),
        InlineKeyboardButton(text='‚ùå –ù–µ—Ç', callback_data='newsletter_cancel')
    )
    keyboard.row(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='start_newsletter'))
    keyboard.row(InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='to_home_menu'))
    return keyboard.as_markup()

def get_photo_choice_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text='üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='add_photo'),
        InlineKeyboardButton(text='‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip_photo')
    )
    keyboard.row(InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='start_newsletter'))
    keyboard.row(InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='to_home_menu'))
    return keyboard.as_markup()

@router.callback_query(F.data == "start_newsletter")
async def start_newsletter(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.",
        reply_markup=to_home_menu_inline()
    )
    await state.set_state(NewsletterStates.waiting_for_message)

@router.message(NewsletterStates.waiting_for_message)
async def get_newsletter_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    
    await message.answer(
        "üñº –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
        reply_markup=get_photo_choice_keyboard()
    )
    await state.set_state(NewsletterStates.waiting_for_photo)

@router.callback_query(NewsletterStates.waiting_for_photo, F.data == "add_photo")
async def request_photo(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_photo_choice_keyboard()
    )

@router.message(NewsletterStates.waiting_for_photo, F.photo)
async def get_newsletter_photo(message: Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    data = await state.get_data()
    
    preview = f"üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data['text']}"
    await message.answer_photo(
        photo=data['photo_id'],
        caption=preview,
        reply_markup=get_yes_no_keyboard()
    )
    await message.answer(
        "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏"
    )
    await state.set_state(NewsletterStates.confirm_sending)

@router.callback_query(NewsletterStates.waiting_for_photo, F.data == "skip_photo")
async def skip_photo(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    
    preview = f"üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{data['text']}"
    await callback.message.edit_text(preview)
    await callback.message.answer(
        "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏",
        reply_markup=get_yes_no_keyboard()
    )
    await state.set_state(NewsletterStates.confirm_sending)

@router.callback_query(NewsletterStates.confirm_sending, F.data == "newsletter_confirm")
async def send_newsletter(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    users = db.get_all_users()
    
    sent_count = 0
    failed_count = 0
    
    await callback.message.edit_text("üì® –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user in users:
        try:
            if 'photo_id' in data:
                await callback.message.bot.send_photo(
                    chat_id=user[1],  # telegram_id is at index 1
                    photo=data['photo_id'],
                    caption=data['text']
                )
            else:
                await callback.message.bot.send_message(
                    chat_id=user[1],
                    text=data['text']
                )
            sent_count += 1
        except Exception:
            failed_count += 1
            continue
    
    await callback.message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì® –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}",
        reply_markup=admin_menu()
    )
    await state.clear()

@router.callback_query(NewsletterStates.confirm_sending, F.data == "newsletter_cancel")
async def cancel_newsletter(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=admin_menu()
    )
    await state.clear()
