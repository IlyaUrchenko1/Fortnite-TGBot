from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton

from utils.database import Database
from keyboards.user_keyboards import back_to_admin_menu, admin_menu
from utils.constants import ADMIN_IDS

router = Router()
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º
class ManageBalanceStates(StatesGroup):
    waiting_for_username = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ username
    waiting_for_action = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    waiting_for_amount = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã

def get_balance_action_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='add_balance'),
        InlineKeyboardButton(text='‚ûñ –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='subtract_balance')
    )
    keyboard.row(
        InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_manage_balance'),
        InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='to_home_menu')
    )
    return keyboard.as_markup()

@router.callback_query(F.data == "manage_balance_by_admin")
async def start_manage_balance(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        await callback.message.edit_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞—è —Å @):",
            reply_markup=back_to_admin_menu()
        )
        await state.set_state(ManageBalanceStates.waiting_for_username)
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(ManageBalanceStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ username"""
    if not message.text.startswith('@'):
        await message.answer(
            "‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=back_to_admin_menu()
        )
        return
    
    username = message.text[1:]  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª @
    user = db.get_user_by_username(username)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=back_to_admin_menu()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(user_id=user[1], username=username)
    
    await message.answer(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: @{username}\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[4]} —Ä—É–±.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_balance_action_keyboard()
    )
    await state.set_state(ManageBalanceStates.waiting_for_action)

@router.callback_query(ManageBalanceStates.waiting_for_action, F.data.in_(['add_balance', 'subtract_balance']))
async def process_action(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    await callback.answer()
    
    action = "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è" if callback.data == "add_balance" else "—Å–Ω—è—Ç–∏—è"
    await state.update_data(action=callback.data)
    
    try:
        await callback.message.edit_text(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {action} –±–∞–ª–∞–Ω—Å–∞ (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=back_to_admin_menu()
        )
        await state.set_state(ManageBalanceStates.waiting_for_amount)
    except Exception as e:
        await callback.message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(ManageBalanceStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã"""
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=back_to_admin_menu()
        )
        return
    
    data = await state.get_data()
    user_id = data['user_id']
    username = data['username']
    action = data['action']
    
    user = db.get_user(user_id)
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!",
            reply_markup=back_to_admin_menu()
        )
        await state.clear()
        return
        
    current_balance = float(user[4])
    
    try:
        if action == "add_balance":
            new_balance = current_balance + amount
            db.update_user(user_id=user_id, balance=amount)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º amount –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n"
                f"üí∞ –ë—ã–ª–æ: {current_balance} —Ä—É–±.\n"
                f"üí∞ –°—Ç–∞–ª–æ: {new_balance} —Ä—É–±.\n"
                f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{amount} —Ä—É–±.",
                reply_markup=back_to_admin_menu()
            )
        else:
            if amount > current_balance:
                await message.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
                    reply_markup=back_to_admin_menu()
                )
                await state.clear()
                return
                
            new_balance = current_balance - amount
            db.update_user(user_id=user_id, balance=-amount)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º -amount –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω!\n\n"
                f"üí∞ –ë—ã–ª–æ: {current_balance} —Ä—É–±.\n"
                f"üí∞ –°—Ç–∞–ª–æ: {new_balance} —Ä—É–±.\n"
                f"üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: -{amount} —Ä—É–±.",
                reply_markup=back_to_admin_menu()
            )
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(e)}",
            reply_markup=back_to_admin_menu()
        )
    
    await state.clear()

