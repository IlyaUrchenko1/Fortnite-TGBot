from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton

from utils.database import Database
from keyboards.user_keyboards import to_home_menu_inline
from utils.varibles import ADMIN_IDS

router = Router()
db = Database()

class ManageBalanceStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_action = State()
    waiting_for_amount = State()

def get_balance_action_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(text='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='add_balance'),
        InlineKeyboardButton(text='‚ûñ –°–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='subtract_balance')
    )
    return keyboard.as_markup()

@router.callback_query(F.data == "manage_balance_by_admin")
async def start_manage_balance(callback: CallbackQuery, state: FSMContext):
    if str(callback.from_user.id) not in ADMIN_IDS:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await callback.message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∏–Ω–∞—è —Å @):",
        reply_markup=to_home_menu_inline()
    )
    await state.set_state(ManageBalanceStates.waiting_for_username)

@router.message(ManageBalanceStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    if not message.text.startswith('@'):
        await message.answer(
            "‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=to_home_menu_inline()
        )
        return
    
    username = message.text[1:]  # Remove @ symbol
    user = db.get_user_by_username(username)
    
    if not user:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=to_home_menu_inline()
        )
        return
    
    await state.update_data(user_id=user[1])  # Store user's telegram_id
    await message.answer(
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {message.text}\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[4]} —Ä—É–±.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_balance_action_keyboard()
    )
    await state.set_state(ManageBalanceStates.waiting_for_action)

@router.callback_query(ManageBalanceStates.waiting_for_action, F.data.in_(['add_balance', 'subtract_balance']))
async def process_action(callback: CallbackQuery, state: FSMContext):
    action = "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è" if callback.data == "add_balance" else "—Å–Ω—è—Ç–∏—è"
    await state.update_data(action=callback.data)
    
    await callback.message.answer(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {action} –±–∞–ª–∞–Ω—Å–∞ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=to_home_menu_inline()
    )
    await state.set_state(ManageBalanceStates.waiting_for_amount)

@router.message(ManageBalanceStates.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=to_home_menu_inline()
        )
        return
    
    data = await state.get_data()
    user_id = data['user_id']
    action = data['action']
    
    user = db.get_user(user_id)
    current_balance = float(user[4])
    
    if action == "add_balance":
        new_balance = current_balance + amount
        db.update_balance(user_id, new_balance)
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.",
            reply_markup=to_home_menu_inline()
        )
    else:
        if amount > current_balance:
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
                reply_markup=to_home_menu_inline()
            )
            await state.clear()
            return
            
        new_balance = current_balance - amount
        db.update_balance(user_id, new_balance)
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–º–µ–Ω—å—à–µ–Ω!\n\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.",
            reply_markup=to_home_menu_inline()
        )
    
    await state.clear()

@router.callback_query(F.data == "to_home_menu", ManageBalanceStates)
async def cancel_manage_balance(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=to_home_menu_inline()
    )
    await state.clear()
